const vscode = require('vscode')
const path = require('path')
const fs = require('fs')

/**
 * @param {*} document
 * @param {*} position
 * @param {*} token
 */
function provideHover(document, position, token) {
	const fileName = document.fileName
	const workDir = path.dirname(fileName)
	const wordposition = document.getWordRangeAtPosition(position)
	const word = document.getText(wordposition)
	const line = document.lineAt(position)
	
	if (/^ *(\/\/|\/\*)/g.test(line.text)) { return }

	let list = [
		// #region Disables
		{ id: 'disable abilities', name: 'Prevents activation of potion and weapon abilities. Also greys out the HUD buttons' },
		{ id: 'enable abilities', name: 'Restores activation of abilities that were disabled by a previous call to "disable abilities"' },
		{ id: 'disable banner', name: 'Prevents rendering of the horizontal banner that appears with the location name at the beginning and end of a location' },
		{ id: 'enable banner', name: 'Restores rendering of the horizontal banner with location name' },
		{ id: 'disable hud', name: 'Hides and disables the gameplay user interface elements. Accepts optional parameters, specifying the set of elements to disable:\n* p = player health and debuffs\n* f = foe health and debuffs\n* a = ability buttons\n* r = resources\n* b = banner\n* u = utility belt' },
		{ id: 'enable hud', name: 'Brings back all the user interface elements hidden by a previous "disable hud" command. Accepts optional parameters, specifying the set of elements to enable:\n* p = player health and debuffs\n* f = foe health and debuffs\n* a = ability buttons\n* r = resources\n* b = banner\n* u = utility belt' },
		{ id: 'disable loadout', name: ''},
		{ id: 'enable loadout', name: ''},
		{ id: 'loadout input', name: 'Prevents / restores weapon loadouts from being saved or recalled with input keys'},
		{ id: 'loadout print', name: 'Hides / brings back the messages that appear when a loadout is recalled'},
		{ id: 'disable pause', name: 'Hides the pause button user interface. Pause is still available with the [P] shortcut' },
		{ id: 'enable pause', name: 'Brings back the pause button hidden by a previous "disable pause" command' },
		{ id: 'disable player', name: 'Hides the player. Has no effect on combat, this is only cosmetic' },
		{ id: 'enable player', name: 'Brings back the player rendering if it was hidden by a previous "disable player" command' },
		// #endregion
		// #region Sound effects
		{ id: 'play buy', name: 'Sound effect' },
		{ id: 'play click', name: 'Sound effect' },
		{ id: 'play confirm', name: 'Sound effect' },
		{ id: 'play soul_stone', name: 'Sound effect' },
		{ id: 'play sword_cast', name: 'Sound effect' },
		{ id: 'play sword_hit', name: 'Sound effect' },
		{ id: 'play wand_cast', name: 'Sound effect' },
		{ id: 'play wand_hit', name: 'Sound effect' },
		{ id: 'play player_kick', name: 'Sound effect' },
		{ id: 'play player_punch', name: 'Sound effect' },
		{ id: 'play stone_throw_cast', name: 'Sound effect' },
		{ id: 'play stone_throw_hit', name: 'Sound effect' },
		{ id: 'play grappling_cast', name: 'Sound effect' },
		{ id: 'play grappling_hit', name: 'Sound effect' },
		{ id: 'play grappling_idle', name: 'Sound effect' },
		{ id: 'play hatchet_cast', name: 'Sound effect' },
		{ id: 'play hatchet_hit', name: 'Sound effect' },
		{ id: 'play shovel_cast', name: 'Sound effect' },
		{ id: 'play torch_cast', name: 'Sound effect' },
		{ id: 'play torch_hit', name: 'Sound effect' },
		{ id: 'play torch_idle', name: 'Sound effect' },
		{ id: 'play pickup_stone', name: 'Sound effect' },
		{ id: 'play pickup_wood', name: 'Sound effect' },
		{ id: 'play pickup_tar', name: 'Sound effect' },
		{ id: 'play pickup_success', name: 'Sound effect' },
		{ id: 'play soul_stone_drop', name: 'Sound effect' },
		{ id: 'play wand_drop', name: 'Sound effect' },
		{ id: 'play key_drop', name: 'Sound effect' },
		{ id: 'play cross_deadwood_bump', name: 'Sound effect' },
		{ id: 'play cross_deadwood_row', name: 'Sound effect' },
		{ id: 'play cross_deadwood_splash', name: 'Sound effect' },
		{ id: 'play ui_starfirst', name: 'Sound effect' },
		{ id: 'play ui_starnew', name: 'Sound effect' },
		{ id: 'play ui_starold1', name: 'Sound effect' },
		{ id: 'play ui_starold2', name: 'Sound effect' },
		{ id: 'play ui_starold3', name: 'Sound effect' },
		{ id: 'play ui_starold4', name: 'Sound effect' },
		{ id: 'play bronze_gate_open', name: 'Sound effect' },
		{ id: 'play prompt_choice', name: 'Sound effect' },
		{ id: 'play waterfall_hook_hit', name: 'Sound effect' },
		{ id: 'play waterfall_splash', name: 'Sound effect' },
		{ id: 'play haunted_gate_key_bounce_1', name: 'Sound effect' },
		{ id: 'play haunted_gate_key_bounce_2', name: 'Sound effect' },
		{ id: 'play haunted_gate_key_bounce_3', name: 'Sound effect' },
		{ id: 'play haunted_gate_opening', name: 'Sound effect' },
		{ id: 'play haunted_gate_point_lost', name: 'Sound effect' },
		{ id: 'play haunted_gate_key_into_gate', name: 'Sound effect' },
		{ id: 'play haunted_gate_shuffle', name: 'Sound effect' },
		{ id: 'play haunted_gate_shuffle_fast', name: 'Sound effect' },
		{ id: 'play haunted_gate_torch_off', name: 'Sound effect' },
		{ id: 'play haunted_gate_torch_on', name: 'Sound effect' },
		{ id: 'play haunted_gate_try_to_open', name: 'Sound effect' },
		{ id: 'play paint_splat', name: 'Sound effect' },
		{ id: 'play waterfall_land', name: 'Sound effect' },
		{ id: 'play waterfall_rope_grab', name: 'Sound effect' },
		{ id: 'play waterfall_rope_swing', name: 'Sound effect' },
		{ id: 'play skeleton_boss_death', name: 'Sound effect' },
		{ id: 'play skeleton_boss_legs_die', name: 'Sound effect' },
		{ id: 'play spider_boss_death', name: 'Sound effect' },
		{ id: 'play tree_boss_death', name: 'Sound effect' },
		{ id: 'play mushroom_boss_death', name: 'Sound effect' },
		{ id: 'play tree_boss_attack', name: 'Sound effect' },
		{ id: 'play tree_boss_awake', name: 'Sound effect' },
		{ id: 'play tree_boss_idle', name: 'Sound effect' },
		{ id: 'play tree_boss_spike', name: 'Sound effect' },
		{ id: 'play spider_boss_attack', name: 'Sound effect' },
		{ id: 'play player_hit', name: 'Sound effect' },
		{ id: 'play mushroom_boss_awake', name: 'Sound effect' },
		{ id: 'play mushroom_boss_punch', name: 'Sound effect' },
		{ id: 'play mushroom_boss_shoot', name: 'Sound effect' },
		{ id: 'play skeleton_boss_arm1', name: 'Sound effect' },
		{ id: 'play skeleton_boss_arm2', name: 'Sound effect' },
		{ id: 'play skeleton_boss_attack', name: 'Sound effect' },
		{ id: 'play skeleton_boss_idle', name: 'Sound effect' },
		{ id: 'play skeleton_boss_bone_bounce', name: 'Sound effect' },
		{ id: 'play skeleton_boss_arm_woosh', name: 'Sound effect' },
		{ id: 'play equip', name: 'Sound effect' },
		{ id: 'play unequip', name: 'Sound effect' },
		{ id: 'play bat_attack_small', name: 'Sound effect' },
		{ id: 'play bat_death_small', name: 'Sound effect' },
		{ id: 'play bat_wing', name: 'Sound effect' },
		{ id: 'play bat_wing_small', name: 'Sound effect' },
		{ id: 'play spider_attack', name: 'Sound effect' },
		{ id: 'play spider_death', name: 'Sound effect' },
		{ id: 'play spider_death_small', name: 'Sound effect' },
		{ id: 'play spider_eggs_spawn', name: 'Sound effect' },
		{ id: 'play spider_walk', name: 'Sound effect' },
		{ id: 'play scarab_awake', name: 'Sound effect' },
		{ id: 'play scarab_bite', name: 'Sound effect' },
		{ id: 'play scarab_death', name: 'Sound effect' },
		{ id: 'play scarab_horn', name: 'Sound effect' },
		{ id: 'play scarab_wings', name: 'Sound effect' },
		{ id: 'play mosquito_attack', name: 'Sound effect' },
		{ id: 'play mosquito_death', name: 'Sound effect' },
		{ id: 'play mosquito_loop', name: 'Sound effect' },
		{ id: 'play bronze_gate_locked', name: 'Sound effect' },
		{ id: 'play bat_attack', name: 'Sound effect' },
		{ id: 'play bat_death', name: 'Sound effect' },
		{ id: 'play progress_1', name: 'Sound effect' },
		{ id: 'play progress_2', name: 'Sound effect' },
		{ id: 'play progress_3', name: 'Sound effect' },
		{ id: 'play progress_4', name: 'Sound effect' },
		{ id: 'play progress_5', name: 'Sound effect' },
		{ id: 'play progress_6', name: 'Sound effect' },
		{ id: 'play progress_7', name: 'Sound effect' },
		{ id: 'play progress_8', name: 'Sound effect' },
		{ id: 'play progress_9', name: 'Sound effect' },
		{ id: 'play life_gain', name: 'Sound effect' },
		{ id: 'play player_death', name: 'Sound effect' },
		{ id: 'play logo_full', name: 'Sound effect' },
		{ id: 'play logo_short', name: 'Sound effect' },
		{ id: 'play smithy_hammer', name: 'Sound effect' },
		{ id: 'play sightstone_cast', name: 'Sound effect' },
		{ id: 'play error', name: 'Sound effect' },
		{ id: 'play ranting_tree_halt', name: 'Sound effect' },
		{ id: 'play treasure_close', name: 'Sound effect' },
		{ id: 'play treasure_item_pop', name: 'Sound effect' },
		{ id: 'play treasure_item_show', name: 'Sound effect' },
		{ id: 'play treasure_open', name: 'Sound effect' },
		{ id: 'play skeleton_boss_awake', name: 'Sound effect' },
		{ id: 'play skeleton_boss_hand_slam', name: 'Sound effect' },
		{ id: 'play level_up', name: 'Sound effect' },
		{ id: 'play insta_kill', name: 'Sound effect' },
		{ id: 'play spider_boss_awake', name: 'Sound effect' },
		{ id: 'play metal_drop', name: 'Sound effect' },
		{ id: 'play treasure_drop', name: 'Sound effect' },
		{ id: 'play smithy_hammer_fail', name: 'Sound effect' },
		{ id: 'play xp_tick', name: 'Sound effect' },
		{ id: 'play crossbow_cast', name: 'Sound effect' },
		{ id: 'play crossbow_hit', name: 'Sound effect' },
		{ id: 'play wand_aether_cast', name: 'Sound effect' },
		{ id: 'play wand_aether_hit', name: 'Sound effect' },
		{ id: 'play wand_air_cast', name: 'Sound effect' },
		{ id: 'play wand_air_hit', name: 'Sound effect' },
		{ id: 'play wand_fire_cast', name: 'Sound effect' },
		{ id: 'play wand_fire_hit', name: 'Sound effect' },
		{ id: 'play wand_ice_cast', name: 'Sound effect' },
		{ id: 'play wand_ice_hit', name: 'Sound effect' },
		{ id: 'play wand_poison_cast', name: 'Sound effect' },
		{ id: 'play wand_poison_hit', name: 'Sound effect' },
		{ id: 'play wand_vigor_cast', name: 'Sound effect' },
		{ id: 'play wand_vigor_hit', name: 'Sound effect' },
		{ id: 'play skeleton_boss_arm_reconnect', name: 'Sound effect' },
		{ id: 'play skeleton_boss_summon_minions', name: 'Sound effect' },
		{ id: 'play mushroom_boss_fat_slam', name: 'Sound effect' },
		{ id: 'play pickup_bronze', name: 'Sound effect' },
		{ id: 'play temple_npc_chant', name: 'Sound effect' },
		{ id: 'play temple_npc_clear_throat', name: 'Sound effect' },
		{ id: 'play temple_npc_talk', name: 'Sound effect' },
		{ id: 'play first_controller', name: 'Sound effect' },
		{ id: 'play slave_npc', name: 'Sound effect' },
		{ id: 'play slave_outro_chatter', name: 'Sound effect' },
		{ id: 'play slave_outro_voice', name: 'Sound effect' },
		{ id: 'play haunted_gate_npc_voice', name: 'Sound effect' },
		{ id: 'play slave_outro_transition', name: 'Sound effect' },
		{ id: 'play bronze_guardian_attack1', name: 'Sound effect' },
		{ id: 'play bronze_guardian_attack2', name: 'Sound effect' },
		{ id: 'play bronze_guardian_attack3', name: 'Sound effect' },
		{ id: 'play bronze_guardian_death', name: 'Sound effect' },
		{ id: 'play bronze_guardian_helmet', name: 'Sound effect' },
		{ id: 'play bronze_guardian_power_up', name: 'Sound effect' },
		{ id: 'play bronze_guardian_steps', name: 'Sound effect' },
		{ id: 'play ant_attack', name: 'Sound effect' },
		{ id: 'play ant_death', name: 'Sound effect' },
		{ id: 'play ant_walk', name: 'Sound effect' },
		{ id: 'play snail_attack', name: 'Sound effect' },
		{ id: 'play snail_attack_small', name: 'Sound effect' },
		{ id: 'play snail_death', name: 'Sound effect' },
		{ id: 'play snail_death_small', name: 'Sound effect' },
		{ id: 'play snail_walk', name: 'Sound effect' },
		{ id: 'play ghost_death', name: 'Sound effect' },
		{ id: 'play ghost_death_small', name: 'Sound effect' },
		{ id: 'play skeletimmy_death', name: 'Sound effect' },
		{ id: 'play skeletony_death', name: 'Sound effect' },
		{ id: 'play skeletimmy_attack', name: 'Sound effect' },
		{ id: 'play skeletony_attack', name: 'Sound effect' },
		{ id: 'play skeletony_awake_a', name: 'Sound effect' },
		{ id: 'play skeletony_awake_b', name: 'Sound effect' },
		{ id: 'play skeletony_walk', name: 'Sound effect' },
		{ id: 'play ghost_loop', name: 'Sound effect' },
		{ id: 'play ghost_loop_small', name: 'Sound effect' },
		{ id: 'play ghost_attack', name: 'Sound effect' },
		{ id: 'play ghost_attack_small', name: 'Sound effect' },
		{ id: 'play controller_death', name: 'Sound effect' },
		{ id: 'play controller_whip_attack', name: 'Sound effect' },
		{ id: 'play controller_whip_hit', name: 'Sound effect' },
		{ id: 'play dominotaur_death', name: 'Sound effect' },
		{ id: 'play dominotaur_whip_attack', name: 'Sound effect' },
		{ id: 'play dominotaur_whip_hit', name: 'Sound effect' },
		{ id: 'play mine_walker_death', name: 'Sound effect' },
		{ id: 'play mine_walker_attack_a', name: 'Sound effect' },
		{ id: 'play mine_walker_attack_b', name: 'Sound effect' },
		{ id: 'play mine_walker_attack_hit', name: 'Sound effect' },
		{ id: 'play mine_walker_awake', name: 'Sound effect' },
		{ id: 'play mine_walker_step', name: 'Sound effect' },
		{ id: 'play fire_elemental_attack', name: 'Sound effect' },
		{ id: 'play fire_elemental_attack_hit', name: 'Sound effect' },
		{ id: 'play fire_elemental_awake', name: 'Sound effect' },
		{ id: 'play fire_elemental_death', name: 'Sound effect' },
		{ id: 'play mine_walker_helmet_break', name: 'Sound effect' },
		{ id: 'play ice_elemental_attack', name: 'Sound effect' },
		{ id: 'play ice_elemental_attack_hit', name: 'Sound effect' },
		{ id: 'play ice_elemental_awake', name: 'Sound effect' },
		{ id: 'play ice_elemental_death', name: 'Sound effect' },
		{ id: 'play ki_eater_attack', name: 'Sound effect' },
		{ id: 'play ki_eater_attack_hit', name: 'Sound effect' },
		{ id: 'play ki_eater_awake', name: 'Sound effect' },
		{ id: 'play ki_eater_death', name: 'Sound effect' },
		{ id: 'play ki_gobbler_attack', name: 'Sound effect' },
		{ id: 'play ki_gobbler_attack_hit', name: 'Sound effect' },
		{ id: 'play ki_gobbler_awake', name: 'Sound effect' },
		{ id: 'play ki_gobbler_death', name: 'Sound effect' },
		{ id: 'play ki_slerper_attack', name: 'Sound effect' },
		{ id: 'play ki_slerper_attack_hit', name: 'Sound effect' },
		{ id: 'play ki_slerper_awake', name: 'Sound effect' },
		{ id: 'play ki_slerper_death', name: 'Sound effect' },
		{ id: 'play bell_ringer_attack', name: 'Sound effect' },
		{ id: 'play bell_ringer_attack_hit', name: 'Sound effect' },
		{ id: 'play cult_guard_attack', name: 'Sound effect' },
		{ id: 'play cult_guard_attack_hit', name: 'Sound effect' },
		{ id: 'play cult_marksman_attack', name: 'Sound effect' },
		{ id: 'play cult_marksman_attack_hit', name: 'Sound effect' },
		{ id: 'play cult_sorcerer_attack', name: 'Sound effect' },
		{ id: 'play cult_sorcerer_attack_hit', name: 'Sound effect' },
		{ id: 'play cultist_death', name: 'Sound effect' },
		{ id: 'play flying_serpent_loop', name: 'Sound effect' },
		{ id: 'play poison_adept_attack', name: 'Sound effect' },
		{ id: 'play poison_adept_attack_hit', name: 'Sound effect' },
		{ id: 'play serpent_attack', name: 'Sound effect' },
		{ id: 'play serpent_death', name: 'Sound effect' },
		{ id: 'play serpent_handler_release', name: 'Sound effect' },
		{ id: 'play serpent_hiss', name: 'Sound effect' },
		{ id: 'play serpent_slither', name: 'Sound effect' },
		{ id: 'play worm_rider_hop', name: 'Sound effect' },
		{ id: 'play booklet_open', name: 'Sound effect' },
		{ id: 'play booklet_turn_page', name: 'Sound effect' },
		{ id: 'play booklet_close', name: 'Sound effect' },
		{ id: 'play hammer_cast', name: 'Sound effect' },
		{ id: 'play hammer_hit', name: 'Sound effect' },
		{ id: 'play shield_dash', name: 'Sound effect' },
		{ id: 'play fissure_break_apart', name: 'Sound effect' },
		{ id: 'play fissure_unmake', name: 'Sound effect' },
		{ id: 'play mindstone_off', name: 'Sound effect' },
		{ id: 'play mindstone_on', name: 'Sound effect' },
		{ id: 'play triskelion_fuse', name: 'Sound effect' },
		{ id: 'play potion_berserk', name: 'Sound effect' },
		{ id: 'play potion_cleansing', name: 'Sound effect' },
		{ id: 'play potion_defensive', name: 'Sound effect' },
		{ id: 'play potion_experience', name: 'Sound effect' },
		{ id: 'play potion_healing', name: 'Sound effect' },
		{ id: 'play potion_invisibility', name: 'Sound effect' },
		{ id: 'play potion_lightning', name: 'Sound effect' },
		{ id: 'play potion_lucky', name: 'Sound effect' },
		{ id: 'play potion_strength', name: 'Sound effect' },
		{ id: 'play potion_vampiric', name: 'Sound effect' },
		{ id: 'play bronze_guardian_pulling_hammer', name: 'Sound effect' },
		{ id: 'play bronze_guardian_removing_hammer', name: 'Sound effect' },
		{ id: 'play bronze_guardian_turbine', name: 'Sound effect' },
		{ id: 'play bronze_guardian_ears_ring', name: 'Sound effect' },
		{ id: 'play bronze_guardian_fuse', name: 'Sound effect' },
		{ id: 'play bronze_guardian_attack4', name: 'Sound effect' },
		{ id: 'play yeti_attack', name: 'Sound effect' },
		{ id: 'play yeti_attack_flick', name: 'Sound effect' },
		{ id: 'play yeti_attack_hit', name: 'Sound effect' },
		{ id: 'play yeti_awake_blow', name: 'Sound effect' },
		{ id: 'play yeti_awake_explosion', name: 'Sound effect' },
		{ id: 'play yeti_awake_inhale', name: 'Sound effect' },
		{ id: 'play yeti_awake_lick', name: 'Sound effect' },
		{ id: 'play yeti_blow', name: 'Sound effect' },
		{ id: 'play yeti_blow_ice_wall', name: 'Sound effect' },
		{ id: 'play yeti_death', name: 'Sound effect' },
		{ id: 'play yeti_inhale', name: 'Sound effect' },
		{ id: 'play yeti_inhale_lick', name: 'Sound effect' },
		{ id: 'play nagaraja_awake_roar', name: 'Sound effect' },
		{ id: 'play nagaraja_awake_swallow', name: 'Sound effect' },
		{ id: 'play nagaraja_awake_tongue_1', name: 'Sound effect' },
		{ id: 'play nagaraja_awake_tongue_2', name: 'Sound effect' },
		{ id: 'play nagaraja_dead', name: 'Sound effect' },
		{ id: 'play nagaraja_poison_attack', name: 'Sound effect' },
		{ id: 'play nagaraja_poison_attack_hit', name: 'Sound effect' },
		{ id: 'play nagaraja_wail', name: 'Sound effect' },
		{ id: 'play nagaraja_wail_brick', name: 'Sound effect' },
		{ id: 'play nagaraja_attack_eat', name: 'Sound effect' },
		{ id: 'play nagaraja_attack_lick', name: 'Sound effect' },
		{ id: 'play nagaraja_attack_swallow', name: 'Sound effect' },
		{ id: 'play nagaraja_tongue_damaged', name: 'Sound effect' },
		{ id: 'play nagaraja_tongue_lift', name: 'Sound effect' },
		{ id: 'play nagaraja_tongue_smell', name: 'Sound effect' },
		{ id: 'play nagaraja_tongue_wrap', name: 'Sound effect' },
		{ id: 'play bearer3_talk', name: 'Sound effect' },
		{ id: 'play bearer_attack', name: 'Sound effect' },
		{ id: 'play bearer_attack_hit', name: 'Sound effect' },
		{ id: 'play bearer_death', name: 'Sound effect' },
		{ id: 'play bearer_stealing', name: 'Sound effect' },
		{ id: 'play bearer_super_attack', name: 'Sound effect' },
		{ id: 'play bearer_scream', name: 'Sound effect' },
		{ id: 'play bearer4_talk', name: 'Sound effect' },
		{ id: 'play bearer4_talk_evolving', name: 'Sound effect' },
		{ id: 'play bearer_evolving', name: 'Sound effect' },
		{ id: 'play elementalist_aether_attack', name: 'Sound effect' },
		{ id: 'play elementalist_aether_attack_hit', name: 'Sound effect' },
		{ id: 'play elementalist_aether_blink', name: 'Sound effect' },
		{ id: 'play elementalist_death', name: 'Sound effect' },
		{ id: 'play elementalist_fire_attack', name: 'Sound effect' },
		{ id: 'play elementalist_fire_attack_hit', name: 'Sound effect' },
		{ id: 'play elementalist_fire_blink', name: 'Sound effect' },
		{ id: 'play elementalist_ice_attack', name: 'Sound effect' },
		{ id: 'play elementalist_ice_attack_hit', name: 'Sound effect' },
		{ id: 'play elementalist_ice_blink', name: 'Sound effect' },
		{ id: 'play elementalist_poison_attack', name: 'Sound effect' },
		{ id: 'play elementalist_poison_attack_hit', name: 'Sound effect' },
		{ id: 'play elementalist_poison_blink', name: 'Sound effect' },
		{ id: 'play elementalist_vigor_attack', name: 'Sound effect' },
		{ id: 'play elementalist_vigor_attack_hit', name: 'Sound effect' },
		{ id: 'play elementalist_vigor_blink', name: 'Sound effect' },
		{ id: 'play bearer5_talk', name: 'Sound effect' },
		{ id: 'play elementalist_evolving', name: 'Sound effect' },
		{ id: 'play perfected_attack', name: 'Sound effect' },
		{ id: 'play perfected_attack_hit', name: 'Sound effect' },
		{ id: 'play perfected_death', name: 'Sound effect' },
		{ id: 'play perfected_defense', name: 'Sound effect' },
		{ id: 'play perfected_energy_ball', name: 'Sound effect' },
		{ id: 'play perfected_energy_ball_hit', name: 'Sound effect' },
		{ id: 'play perfected_summon', name: 'Sound effect' },
		{ id: 'play perfected_talk', name: 'Sound effect' },
		{ id: 'play epilogue_devolving', name: 'Sound effect' },
		{ id: 'play epliogue_player_evolves', name: 'Sound effect' },
		{ id: 'play epilogue_talk', name: 'Sound effect' },
		{ id: 'play devolved_talk', name: 'Sound effect' },
		{ id: 'play dysangelos_guidance', name: 'Sound effect' },
		{ id: 'play dysangelos_guidance_1', name: 'Sound effect' },
		{ id: 'play dysangelos_guidance_2', name: 'Sound effect' },
		{ id: 'play dysangelos_guidance_3', name: 'Sound effect' },
		{ id: 'play dysangelos_intro_talk', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_halt', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_again', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_how_dare', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_avenge', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_get_out', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_impressive', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_very_well', name: 'Sound effect' },
		{ id: 'play ranting_tree_talk_extra', name: 'Sound effect' },
		{ id: 'play hans_talk_intro', name: 'Sound effect' },
		{ id: 'play hans_talk_reward', name: 'Sound effect' },
		{ id: 'play scotty_a_pleasure', name: 'Sound effect' },
		{ id: 'play scotty_a_worthy_opponent', name: 'Sound effect' },
		{ id: 'play scotty_deuced', name: 'Sound effect' },
		{ id: 'play scotty_failte_back', name: 'Sound effect' },
		{ id: 'play scotty_getting_good', name: 'Sound effect' },
		{ id: 'play scotty_grr', name: 'Sound effect' },
		{ id: 'play scotty_guess_which', name: 'Sound effect' },
		{ id: 'play scotty_intro', name: 'Sound effect' },
		{ id: 'play scotty_lets_harden', name: 'Sound effect' },
		{ id: 'play scotty_make_ye_guess', name: 'Sound effect' },
		{ id: 'play scotty_noo_jist', name: 'Sound effect' },
		{ id: 'play scotty_perhaps_the_rules', name: 'Sound effect' },
		{ id: 'play scotty_pick_some_treasure', name: 'Sound effect' },
		{ id: 'play scotty_shall_we_up', name: 'Sound effect' },
		{ id: 'play scotty_we_have_wee_use', name: 'Sound effect' },
		{ id: 'play scotty_well_met', name: 'Sound effect' },
		{ id: 'play scotty_well_then', name: 'Sound effect' },
		{ id: 'play scotty_wizard', name: 'Sound effect' },
		{ id: 'play scotty_wrong_choice', name: 'Sound effect' },
		{ id: 'play scotty_hell_be_back', name: 'Sound effect' },
		{ id: 'play scotty_out_of_treasure', name: 'Sound effect' },
		{ id: 'play scotty_there_he_is', name: 'Sound effect' },
		{ id: 'play nagaraja_choir', name: 'Sound effect' },
		{ id: 'play mushroom_boss_split', name: 'Sound effect' },
		{ id: 'play ant_hill', name: 'Sound effect' },
		{ id: 'play treasure_drop_common', name: 'Sound effect' },
		{ id: 'play treasure_drop_epic', name: 'Sound effect' },
		{ id: 'play treasure_drop_giant', name: 'Sound effect' },
		{ id: 'play treasure_drop_humble', name: 'Sound effect' },
		{ id: 'play treasure_drop_rare', name: 'Sound effect' },
		{ id: 'play dominotaur_awake', name: 'Sound effect' },
		{ id: 'play fire_geyser', name: 'Sound effect' },
		{ id: 'play ice_pillar', name: 'Sound effect' },
		{ id: 'play treasure_item_cyan', name: 'Sound effect' },
		{ id: 'play treasure_item_yellow', name: 'Sound effect' },
		{ id: 'play treasure_item_green', name: 'Sound effect' },
		{ id: 'play treasure_item_blue', name: 'Sound effect' },
		{ id: 'play treasure_item_red', name: 'Sound effect' },
		{ id: 'play treasure_item_rainbow', name: 'Sound effect' },
		{ id: 'play ki_slerper_walk', name: 'Sound effect' },
		{ id: 'play mindstone_found', name: 'Sound effect' },
		{ id: 'play ghost_tomb_death', name: 'Sound effect' },
		{ id: 'play perfected_fly_start', name: 'Sound effect' },
		{ id: 'play perfected_fly_loop', name: 'Sound effect' },
		{ id: 'play perfected_fly_end', name: 'Sound effect' },
		{ id: 'play shop_door_open', name: 'Sound effect' },
		{ id: 'play shop_door_enter', name: 'Sound effect' },
		{ id: 'play scorpion_death', name: 'Sound effect' },
		{ id: 'play bomb_cart_explosion', name: 'Sound effect' },
		{ id: 'play bomb_cart_fuse', name: 'Sound effect' },
		{ id: 'play bomb_cart_move', name: 'Sound effect' },
		{ id: 'play bronze_gate_close', name: 'Sound effect' },
		{ id: 'play poison_powerup', name: 'Sound effect' },
		{ id: 'play acronian_cultist_power_up', name: 'Sound effect' },
		{ id: 'play giant_ice_elemental_attack', name: 'Sound effect' },
		{ id: 'play scout_dialog', name: 'Sound effect' },
		{ id: 'play morel_punch', name: 'Sound effect' },
		{ id: 'play falling_stonefolk', name: 'Sound effect' },
		{ id: 'play scout_arrives', name: 'Sound effect' },
		{ id: 'play scout_leaves', name: 'Sound effect' },
		{ id: 'play scout_wing', name: 'Sound effect' },
		{ id: 'play scout_focus', name: 'Sound effect' },
		{ id: 'play dog_bark', name: 'Sound effect' },
		{ id: 'play frog', name: 'Sound effect' },
		{ id: 'play lost_item_boost', name: 'Sound effect' },
		{ id: 'play treasure_item_lost', name: 'Sound effect' },
		{ id: 'play blade_glow', name: 'Sound effect' },
		{ id: 'play blade_pallas_attack', name: 'Sound effect' },
		{ id: 'play blade_raise', name: 'Sound effect' },
		{ id: 'play blade_drag', name: 'Sound effect' },
		{ id: 'play auggie_voice', name: 'Sound effect' },
		{ id: 'play pallas_voice', name: 'Sound effect' },
		{ id: 'play quest_stone_jump', name: 'Sound effect' },
		{ id: 'play quest_stone_unlock', name: 'Sound effect' },
		{ id: 'play bardiche_cast', name: 'Sound effect' },
		{ id: 'play boo_voice', name: 'Sound effect' },
		{ id: 'play quarterstaff_cast', name: 'Sound effect' },
		{ id: 'play air_hiss', name: 'Sound effect' },
		{ id: 'play bang_go_forward', name: 'Sound effect' },
		{ id: 'play fire_orbs', name: 'Sound effect' },
		{ id: 'play open_note', name: 'Sound effect' },
		{ id: 'play talisman_reveal', name: 'Sound effect' },
		{ id: 'play fire_beast_1', name: 'Sound effect' },
		{ id: 'play fire_beast_2', name: 'Sound effect' },
		{ id: 'play uulaa_voice', name: 'Sound effect' },
		{ id: 'play mask_summon_1', name: 'Sound effect' },
		{ id: 'play mask_summon_2', name: 'Sound effect' },
		// #endregion
		// #region Keywords
		{ id: 'loc', name: 'The current location the player is visiting' },
		{ id: 'loc.id', name: 'The unique identifier of the current location' },
		{ id: 'loc.name', name: 'The localized name of the current location' },
		{ id: 'loc.stars', name: 'The current location\'s difficulty' },
		{ id: 'loc.begin', name: 'Is true only on the first frame of a location, when time = 0, before any game simulation has run. Is not true after an Ouroboros loop. Useful for resetting variables' },
		{ id: 'loc.loop', name: 'Is true on the first frame of a run after an Ouroboros loop' },
		{ id: 'loc.isQuest', name: 'True if the current location is a special location from a Legend or custom quest. False otherwise'},
		{ id: 'loc.averageTime', name: 'The current location\'s average completion time. A location\'s average time is calculated in a weighted manner, where the latest completion time is worth more and older times are worth progressively less the older they are'},
		{ id: 'loc.bestTime', name: 'The current location\'s best completion time (your record, high-score)' },
		{ id: 'foe', name: 'The current foe being targeted by the player' },
		{ id: 'foe.name', name: 'The localized name of the foe being targeted by the player' },
		{ id: 'foe.damage', name: 'The damage per attack of the foe being targeted by the player'},
		{ id: 'foe.distance', name: 'The distance between the player and the foe being targeted' },
		{ id: 'foe.count', name: 'The number of foes within 46 units' },
		{ id: 'foe.hp', name: 'The current hitpoints of the foe being targeted by the player' },
		{ id: 'foe.maxhp', name: 'The maximum hitpoints of the foe being targeted by the player' },
		{ id: 'foe.armor', name: 'The current armor of the foe being targeted by the player' },
		{ id: 'foe.maxarmor', name: 'The maximum armor of the foe being targeted by the player' },
		{ id: 'foe.buffs.count', name: 'The number of buffs (positive effects) on the foe being targeted'},
		{ id: 'foe.buffs.string', name: 'A composite of information about all the buffs on the target foe'},
		{ id: 'foe.debuffs.count', name: 'The number of debuffs (negative effects)'},
		{ id: 'foe.debuffs.string', name: 'A composite of information about all the debuffs'},
		{ id: 'foe.state', name: 'A number representing the target foe\'s current state' },
		{ id: 'foe.time', name: 'Elapsed number of frames in target foe\'s current state' },
		{ id: 'foe.level', name: 'The level number of the target foe' },
		{ id: 'item.left', name: 'The item equipped to the left hand' },
		{ id: 'item.right', name: 'The item equipped to the right hand' },
		{ id: 'item.left.id', name: 'The ID of the item equipped to the left hand' },
		{ id: 'item.right.id', name: 'The ID of the item equipped to the right hand' },
		{ id: 'item.potion', name: 'The potion currently brewed. Includes "auto" if auto-refill is enabled on the Cauldron' },
		{ id: 'harvest', name: 'The next harvestable object, such as a tree or boulder' },
		{ id: 'harvest.distance', name: 'The distance between the player and the nearest harvestable object' },
		{ id: 'pickup', name: 'The current pickup being targeted by the player' },
		{ id: 'pickup.distance', name: 'The distance between the player and the pickup being targeted' },
		{ id: 'time', name: 'The current frame number of the location' },
		{ id: 'totaltime', name: 'The current frame number of the location, accumulated in case of boss sub-location' },
		{ id: 'armor', name: 'The player\'s current armor, rounded down' },
		{ id: 'armor.f', name: 'The player\'s current armor\'s fractional amount' },
		{ id: 'buffs.count', name: 'The number of buffs (positive effects) on the player' },
		{ id: 'buffs.string', name: 'A composite of information about all buffs on the player' },
		{ id: 'debuffs.count', name: 'The number of debuffs (negative effects)' },
		{ id: 'debuffs.string', name: 'A composite of information about all debuffs' },
		{ id: 'hp', name: 'The player\'s current hitpoints' },
		{ id: 'maxhp', name: 'The player\'s maximum hitpoints' },
		{ id: 'maxarmor', name: 'The player\'s maximum armor, rounded down' },
		{ id: 'pos.x', name: 'The player\'s current X position' },
		{ id: 'pos.y', name: 'The player\'s current Y position' },
		{ id: 'pos.z', name: 'The player\'s current Z position' },
		{ id: 'ai.enabled', name: 'True if the AI is on, False if the AI is off (e.g. during a cinematic moment)' },
		{ id: 'ai.paused', name: 'True if the AI is temporarily suspended, such as when waiting for a treasure to drop' },
		{ id: 'ai.idle', name: 'True if the player is idle, waiting for something such as an attack to complete' },
		{ id: 'ai.walking', name: 'True if the player is moving' },
		{ id: 'face', name: 'The player\'s current facial expression' },
		{ id: 'key', name: 'The state of custom game input' },
		{ id: 'res.stone', name: 'The player\'s current amount of stone in their inventory' },
		{ id: 'res.wood', name: 'The player\'s current amount of wood in their inventory' },
		{ id: 'res.tar', name: 'The player\'s current amount of tar in their inventory' },
		{ id: 'res.ki', name: 'The player\'s current amount of ki in their inventory' },
		{ id: 'res.bronze', name: 'The player\'s current amount of bronze in their inventory' },
		{ id: 'res.crystals', name: 'The player\'s current amount of crystals in their inventory' },
		{ id: 'player.direction', name: 'Indicates the direction in which the player is facing. Returns a value of 1 for right and -1 for left' },
		{ id: 'player.name', name: 'The name chosen by the player' },
		{ id: 'totalgp', name: 'The total "Gear Points" of your inventory, calculated from item star levels and enchantment bonuses' },
		{ id: 'rng', name: 'Returns a random integer between 0 and 9999' },
		{ id: 'rngf', name: 'Returns a random floating-point number between 0 and 1' },
		{ id: 'input.x', name: 'The X position, on the ASCII grid, of the input device (mouse/touch)' },
		{ id: 'input.y', name: 'The Y position, on the ASCII grid, of the input device (mouse/touch)' },
		{ id: 'sys.cacheRemoteFiles', name: 'Indicates if files imported remotely should be cached between runs. Default is `true`. If set to `false`, then remote scripts will re-download when you begin play from the Locations screen. It can be useful to change this during development and iteration of new scripts that are deployed remotely. This global property persists between runs.' },
		{ id: 'sys.fileUrl', name: 'Getter for the current file path to be used when importing scripts. The default value depends on your device. On PC the default value is `local`. On mobile the default is `https://StonestoryRPG.com/stonescript/`' },
		{ id: 'sys.SetFileUrl', name: '```stonescript\nsys.SetFileUrl(str)\n```\n---\n \n * Changes the origin of imported scripts when using the commands `import` or `new`. Can only be called on the Mind Stone and will error if written on an imported script. Accepts any URL as a remote location, but also accepts the values `local` and `remote` as shortcuts to easily point at your local drive or to the official Stone Story RPG repository, respectively. If null is passed as parameter, then the file URL resets to the default value for your device. This global property persists between runs.' },
		{ id: 'screen.i', name: 'The screen\'s position in-game, as an index that increses when the player reaches the right-side and it slides over' },
		{ id: 'screen.x', name: 'The screen\'s position in-game' },
		{ id: 'screen.w', name: 'The width of the screen\'s ASCII grid' },
		{ id: 'screen.h', name: 'The height of the screen\'s ASCII grid' },
		{ id: 'time.ms', name: 'Unix time represents the number of milliseconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). It does not take leap seconds into account'},
		{ id: 'time.year', name: 'The local system time on the player\'s computer' },
		{ id: 'time.month', name: 'The local system time on the player\'s computer' },
		{ id: 'time.day', name: 'The local system time on the player\'s computer' },
		{ id: 'time.hour', name: 'The local system time on the player\'s computer' },
		{ id: 'time.minute', name: 'The local system time on the player\'s computer' },
		{ id: 'time.second', name: 'The local system time on the player\'s computer' },
		{ id: 'time.FormatCasual', name: '```stonescript\ntime.FormatCasual(int, [bool])\n```\n---\n \n * Converts an amount of frames into a human-readable string representation of time, such as "1m 23s". The second parameter (bool) is optional; If \'true\', then precision is maximized in the result' },
		{ id: 'time.FormatDigital', name: '```stonescript\ntime.FormatDigital(int, [bool])\n```\n---\n \n * Converts an amount of frames into a human-readable string representation of time, such as "1:23". The second parameter (bool) is optional; If \'true\', then precision is maximized in the result' },
		{ id: 'utc.year', name: 'The local system time on the player\'s computer' },
		{ id: 'utc.month', name: 'The local system time on the player\'s computer' },
		{ id: 'utc.day', name: 'The current UTC time' },
		{ id: 'utc.hour', name: 'The current UTC time' },
		{ id: 'utc.minute', name: 'The current UTC time' },
		{ id: 'utc.second', name: 'The current UTC time' },
		{ id: 'activate', name: '```stonescript\nactivate (ability)\n```\n---\n \n * Activates an item ability. (ability) can have these values: potion, P, left, L, right, R' },
		{ id: 'brew', name: '```stonescript\nbrew (ingredients)\n```\n---\n \n * Refills the potion bottle to the specified combination of ingredients. Executes only at the beginning of a run, at time 0. Ingredients can be stone, wood, tar or bronze and should be separated by +. Ingredient names can be written in English or in the language selected in the settings'
		},
		{ id: 'equip', name: '```stonescript\nequip (str)\n```\n---\n \n * Equips an item. (str) has a limit of 7 criteria. Two-handed items must use this form of the equip command' },
		{ id: 'equipL', name: '```stonescript\nequipL (str)\n```\n---\n \n * Equips an item to the left hand that best fits the given criteria' },
		{ id: 'equipR', name: '```stonescript\nequipR (str)\n```\n---\n \n * Equips an item to the right hand that best fits the given criteria' },
		{ id: 'loadout', name: '```stonescript\nloadout (n)\n```\n---\n \n * Equips a specific loadout number' },
		{ id: 'var', name: '```stonescript\nvar (variable)\n```\n---\n \n * Declares a variable that can be used in math, logical and string operations' },
		{ id: 'func', name: '```stonescript\nfunc (function)\n```\n---\n \n * Declares a function that can be called later' },
		{ id: 'for', name: '```stonescript\nfor v = a..b\n```\n---\n \n * Creates a loop that iterates a variable \'v\' from value \'a\' to value \'b\'. Code that appears inside the loop\'s scope will run multiple times' },
		{ id: 'import', name: '```stonescript\nimoprt (script)\n```\n---\n \n * Loads and executes a singular copy of an external script' },
		{ id: 'new', name: '```stonescript\nnew (script)\n```\n---\n \n * Loads and executes an external script similar to \'import\'. However, objects loaded with \'new\' are each an individual copy and their script body will only execute one time' },
		{ id: 'play', name: '```stonescript\nplay (sound) [pitch]\n```\n---\n \n* Plays a sound effect with an optional pitch value. The pitch default value is 100 with higher numbers increasing the pitch and smaller numbers lowering it' },
		{ id: 'ambient', name: 'Returns a comma-separated list of all active ambient audio IDs' },
		{ id: 'ambient.Add', name: '```stonescript\nambient.Add(str)\n```\n---\n \n * Adds a layer of ambient audio, with the given sound ID. Up to 4 layers. If a 5th layer is added, the oldest layer is removed' },
		{ id: 'ambient.Stop', name: 'Clears all ambient layers' },
		{ id: 'draw.Bg', name: '```stonescript\ndraw.Bg(x, y, color, [w], [h])\n```\n---\n \n * Sets the background color at a specific screen position' },
		{ id: 'draw.Box', name: '```stonescript\ndraw.Box(x, y, w, h, color, style)\n```\n---\n \n * Draws a rectangular shape at the specified position and size. The rectangle\'s border is defined by color and a style number. Negative style numbers cause the center of the rectangle to be transparent. CAVEAT - At this time, advanced prints always draw on top of boxes' },
		{ id: 'draw.Clear', name: '```stonescript\ndraw.Clear()\n```\n---\n \n * Clears the entire screen' },
		{ id: 'draw.GetSymbol', name: '```stonescript\ndraw.GetSymbol(x, y)\n```\n---\n \n * Returns the glyph at screen position (x, y)' },
		{ id: 'draw.Player', name: '```stonescript\ndraw.Player()\n```\n---\n \n * Draws the player character, with all equipment and addons, at a specific point in the script'},
		{ id: 'int.Parse', name: '```stonescript\nint.Parse(str)\n```\n---\n \n * Converts a string of a number into an integer value. If the given string is not a number an error is thrown' },
		{ id: 'item.CanActivate', name: '```stonescript\nitem.CanActivate()\n```\n---\n \n * Returns true if it\'s possible to activate item abilities. False otherwise. In some gameplay situations all ability activations are disabled, even if they are not on cooldown, such as moments before a boss fight or during a cinematic'
		},
		{ id: 'item.GetCooldown', name: '```stonescript\nitem.GetCooldown(str)\n```\n---\n \n * Returns the remaining cooldown time (in frames) for a given ability' },
		{ id: 'item.GetCount', name: '```stonescript\nitem.GetCount(str)\n```\n---\n \n * Returns the number of copies of an item in the inventory. Returns 0 if no item is found' },
		{ id: 'loc.Leave', name: '```stonescript\nloc.Leave()\n```\n---\n \n * Causes the run to be abandoned as if the player had pressed to leave manually' },
		{ id: 'loc.Pause', name: '```stonescript\nloc.Leave()\n```\n---\n \n * Causes the run to be paused as if the player had pressed the pause button manually' },
		{ id: 'math.Abs', name: '```stonescript\nmath.Abs(num)\n```\n---\n \n * Returns the absolute value of a given number' },
		{ id: 'math.Sign', name: '```stonescript\nmath.Sign(num)\n```\n---\n \n * Returns -1 if the given number is negative. Otherwise, returns 1' },
		{ id: 'math.Min', name: '```stonescript\nmath.Min(num1, num2)\n```\n---\n \n * Returns the smallest of the two numbers' },
		{ id: 'math.Max', name: '```stonescript\nmath.Max(num1, num2)\n```\n---\n \n * Returns the largest of the two numbers' },
		{ id: 'math.Clamp', name: '```stonescript\nmath.Clamp(num, min, max)\n```\n---\n \n * Constrains a number to within the range \'min\' and \'max\'. If the number is already within the range then it will be returned without change' },
		{ id: 'math.Round', name: '```stonescript\nmath.Round(num)\n```\n---\n \n * Rounds a number to the nearest whole number' },
		{ id: 'math.RoundToInt', name: '```stonescript\nmath.RoundToInt(num)\n```\n---\n \n * Rounds a number to the nearest whole integer' },
		{ id: 'math.Floor', name: '```stonescript\nmath.Floor(num)\n```\n---\n \n * Rounds a number down, to the first whole number smaller than it' },
		{ id: 'math.FloorToInt', name: '```stonescript\nmath.FloorToInt(num)\n```\n---\n \n * Rounds a number down, to the first integer smaller than it' },
		{ id: 'math.Ceil', name: '```stonescript\nmath.Ceil(num)\n```\n---\n \n * Rounds a number up, to the first whole number greater than it' },
		{ id: 'math.CeilToInt', name: '```stonescript\nmath.CeilToInt(num)\n```\n---\n \n * Rounds a number up, to the first integer greater than it' },
		{ id: 'math.Lerp', name: '```stonescript\nmath.Lerp(a, b, t)\n```\n---\n \n * Performs a linear interpolation, from value a to b at time (percentage)' },
		{ id: 'math.Log', name: '```stonescript\nmath.Log(num, base)\n```\n---\n \n * Returns the logarithm of a number at a given base' },
		{ id: 'math.Pow', name: '```stonescript\nmath.Pow(num, p)\n```\n---\n \n * Returns the number raised to a power' },
		{ id: 'math.Sqrt', name: '```stonescript\nmath.Sqrt(num)\n```\n---\n \n * Returns the square root of a number' },
		{ id: 'math.pi', name: 'The constant π, approximately 3.1415926' },
		{ id: 'math.ToDeg', name: '```stonescript\nmath.ToDeg(num)\n```\n---\n \n * Converts a radian number to degrees' },
		{ id: 'math.ToRad', name: '```stonescript\nmath.ToRad(num)\n```\n---\n \n * Converts a degrees number to radians' },
		{ id: 'math.Acos', name: '```stonescript\nmath.Acos(num)\n```\n---\n \n * Returns the arc-cosine of a number, in radians. The input bounds are -1 to 1. If the input value is out of bounds then "NaN" is returned' },
		{ id: 'math.Asin', name: '```stonescript\nmath.Asin(num)\n```\n---\n \n * Returns the arc-sine of a number, in radians. The input bounds are -1 to 1. If the input value is out of bounds then "NaN" is returned' },
		{ id: 'math.Atan', name: '```stonescript\nmath.Atan(num)\n```\n---\n \n * Returns the arc-tangent of a number, in radians' },
		{ id: 'math.Cos', name: '```stonescript\nmath.Cos(num)\n```\n---\n \n * Returns the cosine of a given radian angle' },
		{ id: 'math.Sin', name: '```stonescript\nmath.Sin(num)\n```\n---\n \n * Returns the sine of a given radian angle' },
		{ id: 'math.Tan', name: '```stonescript\nmath.Tan(num)\n```\n---\n \n * Returns the tangent of a given radian angle' },
		{ id: 'music', name: 'Returns the ID of the currently playing music' },
		{ id: 'music.Play', name: '```stonescript\nmusic.Play(str)\n```\n---\n \n * Plays a music, with the given sound ID. There can only be one music playing at a time' },
		{ id: 'music.Stop', name: '```stonescript\nmusic.Stop()\n```\n---\n \n * Stops all music' },
		{ id: 'player.ShowScaredFace', name: '```stonescript\nplayer.ShowScaredFace(num)\n```\n---\n \n * If the player has big-head enabled, their facial expression will change to scared for a given amount of time' },
		{ id: 'screen.FromWorldX', name: '```stonescript\nscreen.FromWorldX(int)\n```\n---\n \n * Converts a value on the X-axis from world-space to screen-space' },
		{ id: 'screen.FromWorldZ', name: '```stonescript\nscreen.FromWorldZ(int)\n```\n---\n \n * Converts a value from the world-space Z-axis to screen-space Y-axis' },
		{ id: 'screen.ToWorldX', name: '```stonescript\nscreen.ToWorldX(int)\n```\n---\n \n * Converts a value on the X-axis from screen-space to world-space' },
		{ id: 'screen.ToWorldZ', name: '```stonescript\nscreen.ToWorldZ(int)\n```\n---\n \n * Converts a value from the screen-space Y-axis to world-space Z-axis' },
		{ id: 'screen.Next', name: '```stonescript\nscreen.Next()\n```\n---\n \n * For locations that are multi-screen, moves the camera one screen forward in relation to the player' },
		{ id: 'screen.Previous', name: '```stonescript\nscreen.Previous()\n```\n---\n \n * For locations that are multi-screen, moves the camera one screen back in relation to the player' },
		{ id: 'screen.ResetOffset', name: '```stonescript\nscreen.ResetOffset()\n```\n---\n \n * Resets the camera to follow the player, undoing changes made by screen.Next() and screen.Previous()' },
		{ id: 'storage', name: 'Values saved into permanent storage persist when you leave a location, as well as when the game is shut down. They are not part of your primary_save, existing instead in a series of separate files within the Stonescript folder. Imported scripts access storage in isolation from each other, allowing different modules to use the same keys without modifying each other\'s data' },
		{ id: 'storage.Delete', name: '```stonescript\nstorage.Delete(str)\n```\n---\n \n * Deletes any value that may exist at the specified key' },
		{ id: 'storage.Get', name: '```stonescript\nstorage.Get(str, [value])\n```\n---\n \n * Retrieves a permanent value stored at the specified key. If it\'s not found, returns the second parameter as a default value' },
		{ id: 'storage.Has', name: '```stonescript\nstorage.Has(string)\n```\n---\n \n * Returns true if the specified key exists in permanent storage; false otherwise' },
		{ id: 'storage.Incr', name: '```stonescript\nstorage.Incr(str, [int])\n```\n---\n \n * Increases by 1 (if int is empty) the value stored at the specified key, then returns the new value' },
		{ id: 'storage.Keys', name: '```stonescript\nstorage.Keys()\n```\n---\n \n * Retrieves an array of strings containing all the storage keys available in the current context'},
		{ id: 'storage.Set', name: '```stonescript\nstorage.Set(string)\n```\n---\n \n * Saves a value to permanent storage at a specified key' },
		{ id: 'string.Break', name: '```stonescript\nstring.Break(str, int)\n```\n---\n \n * Breaks a string into multiple strings, given a max width' },
		{ id: 'string.Capitalize', name: '```stonescript\nstring.Capitalize(str)\n```\n---\n \n * Changes the first letter of a string to be upper-case' },
		{ id: 'string.Equals', name: '```stonescript\nstring.Equals(str1, str2)\n```\n---\n \n * Takes two string parameters and returns true if they are exactly the same. Returns false otherwise. Case sensitive' },
		{ id: 'string.Format', name: '```stonescript\nstring.Format(str, ...)\n```\n---\n \n * Modifies a string by replacing format-templates with the values of the other parameters, then returns the final composed string. This is a powerful function that supports lots of formatting options' },
		{ id: 'string.IndexOf', name: '```stonescript\nstring.IndexOf(str, criteria, [startAt])\n```\n---\n \n * Takes a string variable, a string criteria and a starting index as parameters. Finds the position of the criteria inside the string, but begins the search at \'startAt\'. Returns -1 if not found' },
		{ id: 'string.Join', name: '```stonescript\nstring.Join(s, [], [int], [int])\n```\n---\n \n * Takes an array of strings [] and combines it into a single string with the separator s. Optional integer parameters can be passed that specify the starting index and number of elements to combine. If no index parameters are provided, the entire array is combined' },
		{ id: 'string.Size', name: '```stonescript\nstring.Size(str)\n```\n---\n \n * Takes a string variable as parameter and calculates how long it is, in number of glyphs' },
		{ id: 'string.Split', name: '```stonescript\nstring.Split(str, [s...], [bool])\n```\n---\n \n * Takes a string and breaks it down into an array of strings, given a set of string separators s…. If no separators are provided, then the string is broken wherever there is a space. An optional boolean parameter specifies if empty entries should be discarded' },
		{ id: 'string.Sub', name: '```stonescript\nstring.Sub(str, startAt, [len])\n```\n---\n \n * Takes a string variable, a starting index and a length as parameters and splits the string from that starting point, stopping at the given length' },
		{ id: 'string.ToLower', name: '```stonescript\nstring.ToLower(str)\n```\n---\n \n * Changes all letters in a string to lower-case' },
		{ id: 'string.ToUpper', name: '```stonescript\nstring.ToUpper(str)\n```\n---\n \n * Changes all letters in a string to upper-case' },
		{ id: 'ui.root', name: 'The base UI object on top of which the entire tree is built' },
		{ id: 'ui.AddAnim', name: '```stonescript\nui.AddAnim(str)\n```\n---\n \n * Adds an Anim object to the root Panel. Accepts an animation sprite sheet as parameter' },
		{ id: 'ui.AddButton', name: '```stonescript\nui.AddButton()\n```\n---\n \n * Adds a Button object to the root Panel' },
		{ id: 'ui.AddPanel', name: '```stonescript\nui.AddPanel()\n```\n---\n \n * Adds a Panel object to the root Panel. Panels are an important object type, serving as containers for other elements' },
		{ id: 'ui.AddStyle', name: '```stonescript\nui.AddStyle()\n```\n---\n \n * Adds a new style that can be used for drawing rectangular Components such as Panels and Buttons. Returns an ID number of the new style. Is protected against the same style being added multiple times, in which case nothing changes and the same ID is returned. Because different scripts may all call ui.AddStyle(), it\'s recommended to save the ID as a variable instead of hard-coding style numbers into the script' },
		{ id: 'ui.AddText', name: '```stonescript\nui.AddText(str)\n```\n---\n \n * Adds a Text object to the root Panel' },
		{ id: 'ui.Clear', name: '```stonescript\nui.Clear()\n```\n---\n \n * Removes all UI elements from the main container' },
		{ id: 'ui.ShowBanner', name: '```stonescript\nui.ShowBanner(str, [str])\n```\n---\n \n * Displays the animated banner with up to two messages. The banner animation restarts each time ui.ShowBanner() is called' },
		{ id: 'color.FromRGB', name: '```stonescript\ncolor.FromRGB(r, g, b)\n```\n---\n \n * Converts a color from three integer numbers (0 to 255) into a string' },
		{ id: 'color.ToRGB', name: '```stonescript\ncolor.ToRGB(str)\n```\n---\n \n * Converts a color from string to three integer numbers (0 to 255)' },
		{ id: 'color.Lerp', name: '```stonescript\ncolor.Lerp(c1, c2, t)\n```\n---\n \n * Interpolates linearly from color c1 to color c2 at time (percentage) t' },
		{ id: 'color.Random', name: '```stonescript\ncolor.Random()\n```\n---\n \n * Returns a random color' },
		{ id: 'Type', name: '```stonescript\nType(var)\n```\n---\n \n * Evaluates the type of a variable and returns a string representation. Possible types include \'string\', \'int\', \'bool\', \'function\', \'object\' and \'null\'' },
		{ id: 'te.language', name: 'The code for the language selected by the player in settings. Possible values: EN, PT-BR, ZH-CN, ZH-TW, FR, DE, RU, ES-LA, ES-EU, JP, KR and TK' },
		{ id: 'te.xt', name: '```stonescript\nte.xt(str)\n```\n---\n \n * Translates a given English text into the player\'s selected language. If a translated version is not found, then the input text is returned instead. Alternatively, a text identifier (TID) can be used as input--albeit the exhausting list of TIDs is beyond the scope of this manual' },
		{ id: 'te.GetTID', name: '```stonescript\nte.GetTID(str)\n```\n---\n \n * Returns the text identifier (TID) for a given text. The input text is expected in the language selected by the player' },
		{ id: 'te.ToEnglish', name: '```stonescript\nte.ToEnglish(str)\n```\n---\n \n * Translates a given text from the player\'s selected language into the original English text. If a translated version is not found, then the input text is returned instead' },
		{ id: 'summon.count', name: 'The number of summoned allies currently in game' },
		{ id: 'summon.GetId', name: '```stonescript\n summon.GetId(index = 0) \n```\n---\n * Returns the ID of the summon at a given `index`. The `index` parameter is optional and defaults to zero (first summon). Returns null if no summons are at that `index`' },
		{ id: 'summon.GetName', name: '```stonescript\n summon.GetName(index = 0) \n```\n---\n * Returns the localized name of the summon at a given `index`. The `index` parameter is optional and defaults to zero (first summon). Returns null if no summons are at that `index`.' },
		{ id: 'summon.GetVar', name: '```stonescript\n summon.GetVar(varName, index = 0) \n```\n---\n * Returns the value for a custom variable on a summon. Different types of summons expose different variables, based on their unique abilities. The `index` parameter is optional and defaults to zero (first summon). Returns null if no summons are at that `index`. Shows an error if varName does not correspond to a valid variable' },
		{ id: 'summon.GetState', name: '```stonescript\n summon.GetState(index = 0) \n```\n---\n * Returns a number representing the current state of a summon. The `index` parameter is optional and defaults to zero (first summon). Returns -1 if no summons are at that `index`' },
		{ id: 'summon.GetTime', name: '```stonescript\n summon.GetTime(index = 0) \n```\n---\n * Returns the elapsed number of frames in the current state of a summon. The `index` parameter is optional and defaults to zero (first summon). Returns -1 if no summons are at that `index`' },
		// #endregion
		// #region Weapons
		{ id: 'sword', name: 'Weapon' },
		{ id: 'wand', name: 'Weapon' },
		{ id: 'shield', name: 'Weapon' },
		{ id: 'bardiche', name: 'Weapon \\ search filter for buffs' },
		{ id: 'crossbow', name: 'Weapon' },
		{ id: 'hammer', name: 'Weapon' },
		{ id: 'heavy hammer', name: 'Weapon' },
		{ id: 'staff', name: 'Weapon' },
		{ id: 'quarterstaff', name: 'Weapon' },
		{ id: 'staff',name: 'Weapon' },
		{ id: 'arm',name: 'Weapon' },
		{ id: 'blade', name: 'Weapon' },
		{ id: 'mask', name: 'Weapon' },
		{ id: 'mind stone',name: 'Weapon' },
		{ id: 'runestone',name: 'Weapon' },
		{ id: 'grappling hook',name: 'Weapon' },
		{ id: 'mind', name: 'Weapon' },
		{ id: 'stones', name: 'Weapon' },
		{ id: 'hatchet', name: 'Weapon' },
		{ id: 'shovel', name: 'Weapon' },
		{ id: 'grappling', name: 'Weapon' },
		{ id: 'moon', name: 'Weapon (moon stone) \n * Gives +5 attack speed when equipped' },
		{ id: 'mind', name: 'Weapon (mind stone) \n * Dodge backwards upon equipping. Cooldown 12 seconds' },
		{ id: 'triskelion', name: 'Weapon (triskelion stone) \n * +1 Movement speed when equipped' },
		{ id: 'fissure', name: 'Weapon (fissure stone) \n * Deals damage equial to half your health. Cooldown 18 seconds' },
		{ id: 'quest', name: 'Weapon (quest stone) \n * Gives [2] armor points when equipped, increases shield recovery rate' },
		{ id: 'ouroboros', name: 'Weapon (ouroboros stone) \n * Replayed locations loop around. Heal over time when equipped' },
		{ id: 'xp', name: 'Weapon (xp stone) \n * Bonus XP when equipped' },
		{ id: 'xi', name: 'Weapon (xi stone) \n * Bouss KI (@) when equipped' },
		{ id: 'star', name: 'Weapon (star stone) \n * Gathers nearby resources' },
		{ id: 'sight', name: 'Weapon (sight stone) \n * Reveals the nature of things' },
		// #endregion
		// #region Search filters
		{ id: 'poison', name: 'Search filter' },
		{ id: 'vigor', name: 'Search filter' },
		{ id: 'aether', name: 'Search filter' },
		{ id: 'fire', name: 'Search filter' },
		{ id: 'air', name: 'Search filter' },
		{ id: 'ice', name: 'Search filter' },
		{ id: 'arachnid', name: 'Search filter' },
		{ id: 'serpent', name: 'Search filter' },
		{ id: 'insect', name: 'Search filter' },
		{ id: 'machine', name: 'Search filter' },
		{ id: 'humanoid', name: 'Search filter' },
		{ id: 'elemental', name: 'Search filter' },
		{ id: 'boss', name: 'Search filter' },
		{ id: 'phase1', name: 'Search filter' },
		{ id: 'phase2', name: 'Search filter' },
		{ id: 'phase3', name: 'Search filter' },
		{ id: 'spawner', name: 'Search filter' },
		{ id: 'flying', name: 'Search filter' },
		{ id: 'slow', name: 'Search filter' },
		{ id: 'ranged', name: 'Search filter' },
		{ id: 'explode', name: 'Search filter' },
		{ id: 'swarm', name: 'Search filter' },
		{ id: 'unpushable undamageable', name: 'Search filter' },
		{ id: 'magic_resist', name: 'Search filter' },
		{ id: 'magic_vulnerability', name: 'Search filter' },
		{ id: 'immune_to_stun', name: 'Search filter' },
		{ id: 'immune_to_ranged', name: 'Search filter' },
		{ id: 'immune_to_debuff_damage', name: 'Search filter' },
		{ id: 'immune_to_physical', name: 'Search filter' },
		{ id: 'stone', name: 'Brewing resource \\ Search filter' },
		{ id: 'compound', name: 'Search filter for shield' },
		{ id: 'dashing', name: 'Search filter for shield' },
		{ id: 'bashing', name: 'Search filter for shield' },
		{ id: 'long', name: 'Search filter for sword' },
		{ id: 'heavy', name: 'Search filter for crossbow' },
		{ id: 'repeating', name: 'Search filter for crossbow' },
		{ id: 'socketed', name: 'Search filter for staff' },
		{ id: 'wood', name: 'Brewing resource' },
		{ id: 'tar', name: 'Brewing resource' },
		{ id: 'bronze', name: 'Brewing resource' },
		{ id: 'ki', name: 'Brewing resource' },
		{ id: 'potion', name: 'Search filter' },
		{ id: 'empty', name: 'Search filter for potion' },
		// #endregion
		// #region De/Buffs search filters
		{ id: 'protection', name: 'Search filter for foe buffs' },
		{ id: 'buff_protection', name: 'Search filter for foe buffs' },
		{ id: 'stun', name: 'Search filter for foe debuffs' },
		{ id: 'dot', name: 'Search filter for foe debuffs' },
		{ id: 'debuff_dot', name: 'Search filter for foe debuffs' },
		{ id: 'debuff_dot_2', name: 'Search filter for foe debuffs' },
		{ id: 'damage', name: 'Search filter for foe debuffs' },
		{ id: 'debuff_damage', name: 'Search filter for foe debuffs' },
		{ id: 'chill', name: 'Search filter for foe debuffs' },
		{ id: 'debuff_chill', name: 'Search filter for foe debuffs' },
		{ id: 'bardiche', name: 'Search filter for player buffs' },
		{ id: 'smite', name: 'Search filter for player buffs' },
		{ id: 'berserk', name: 'Search filter for player buffs' },
		{ id: 'crit', name: 'Search filter for player buffs' },
		{ id: 'lucky_crit', name: 'Search filter for player buffs' },
		{ id: 'mult', name: 'Search filter for player buffs' },
		{ id: 'lucky_mult', name: 'Search filter for player buffs' },
		{ id: 'strength', name: 'Search filter for player buffs' },
		{ id: 'invisibility', name: 'Search filter for player buffs' },
		{ id: 'vampiric', name: 'Search filter for player buffs' },
		{ id: 'experience', name: 'Search filter for player buffs' },
		// #endregion
		// #region Key search filters
		{ id: 'left', name: 'Search filter for key codes' },
		{ id: 'right', name: 'Search filter for key codes' },
		{ id: 'up', name: 'Search filter for key codes' },
		{ id: 'down', name: 'Search filter for key codes' },
		{ id: 'primary', name: 'Search filter for key codes' },
		{ id: 'back', name: 'Search filter for key codes' },
		{ id: 'ability1', name: 'Search filter for key codes' },
		{ id: 'ability2', name: 'Search filter for key codes' },
		{ id: 'bumpL', name: 'Search filter for key codes' },
		{ id: 'bumpR', name: 'Search filter for key codes' },
		{ id: 'leftBegin', name: 'Search filter for key codes' },
		{ id: 'rightBegin', name: 'Search filter for key codes' },
		{ id: 'upBegin', name: 'Search filter for key codes' },
		{ id: 'downBegin', name: 'Search filter for key codes' },
		{ id: 'primaryBegin', name: 'Search filter for key codes' },
		{ id: 'backBegin', name: 'Search filter for key codes' },
		{ id: 'ability1Begin', name: 'Search filter for key codes' },
		{ id: 'ability2Begin', name: 'Search filter for key codes' },
		{ id: 'bumpLBegin', name: 'Search filter for key codes' },
		{ id: 'bumpRBegin', name: 'Search filter for key codes' },
		{ id: 'leftEnd', name: 'Search filter for key codes' },
		{ id: 'rightEnd', name: 'Search filter for key codes' },
		{ id: 'upEnd', name: 'Search filter for key codes' },
		{ id: 'downEnd', name: 'Search filter for key codes' },
		{ id: 'primaryEnd', name: 'Search filter for key codes' },
		{ id: 'backEnd', name: 'Search filter for key codes' },
		{ id: 'ability1End', name: 'Search filter for key codes' },
		{ id: 'ability2End', name: 'Search filter for key codes' },
		{ id: 'bumpLEnd', name: 'Search filter for key codes' },
		{ id: 'bumpREnd', name: 'Search filter for key codes' },
		{ id: '←', name: 'Search filter for key codes' },
		{ id: '→', name: 'Search filter for key codes' },
		{ id: '↑', name: 'Search filter for key codes' },
		{ id: '↓', name: 'Search filter for key codes' },
		{ id: 'A', name: 'Search filter for key codes' },
		{ id: 'D', name: 'Search filter for key codes' },
		{ id: 'W', name: 'Search filter for key codes' },
		{ id: 'S', name: 'Search filter for key codes' },
		{ id: 'LMB', name: 'Search filter for key codes' },
		{ id: 'Return', name: 'Search filter for key codes' },
		{ id: 'X', name: 'Search filter for key codes' },
		{ id: 'Shift', name: 'Search filter for key codes' },
		{ id: 'Control', name: 'Search filter for key codes' },
		{ id: 'Z', name: 'Search filter for key codes' },
		{ id: 'C', name: 'Search filter for key codes' },
		// #endregion
		// #region Locations
		{ id: 'Rocky', name: 'Location (Rocky Plateau) \n * Stone resource (o) \n * Can drop any runes when the location level is greater than 5 (stars)' },
		{ id: 'Waterfall', name: 'Location (Deadwood waterfall)' },
		{ id: 'Deadwood', name: 'Location (Deadwood Canyon) \n * Wood resource (_/`)' },
		{ id: 'Caves', name: 'Location (Caves of Fear) \n * Tar resource (≈) \n * Drops poison runes (∞)\n * Enemies weak to Ice' },
		{ id: 'Mushroom', name: 'Location (Mushroom Forest) \n * Drops vigor runes (❤) \n * Enemies weak to Poison' },
		{ id: 'Halls', name: 'Location (Haunted Halls) \n * Drops Aether runes (\*) \n * Enemies weak to Vigor \n * Skeletons take double magic damage \n * Booos immune to physical damage' },
		{ id: 'Mine', name: 'Location (Boiling Mine) \n * Bronze resource (:.) \n * Drops fire runes (φ) \n * Enemies weak to Aether (\*)' },
		{ id: 'Ridge', name: 'Location (Icy Ridge) \n * Drops Ice runes (❄) \n * Enemies weak to Fire' },
		{ id: 'Temple', name: 'Location (Temple) \n * Drops poison runes (∞)' },
		{ id: 'Shop', name: 'Location (Hotspring Shop) \n * Here player can buy items and chests' },
		{ id: 'Gate', name: 'Location (Haunted Gate) \n * Here player can win a bone chest once per day' },
		// #endregion
		// #region Enemies
		{ id: 'target', name: 'Currently targeted enemy, waypoint or foe' },
		{ id: 'waypoint', name: 'Target search filter' },
		// Rocky
		{ id: 'acronian_scout', name: 'Enemy (Acronian Scout)' },
		{ id: 'Dysangelos', name: 'Enemy (Dysangelos, Bearer of Stones)' },
		{ id: 'dysangelos', name: 'Enemy (Dysangelos, Bearer of Stones)' },
		{ id: 'dysangelos_bearer', name: 'Enemy (Dysangelos, Bearer of Stones) \n * phase1' },
		{ id: 'dysangelos_elementalist', name: 'Enemy (One With the Elements) \n * phase2' },
		{ id: 'dysangelos_perfected', name: 'Enemy (Dysangelos Perfected) \n * phase3' },
		// Deadwood
		{ id: 'scarab', name: 'Enemy (Stone Scarab)' },
		{ id: 'flesh_scarab', name: 'Enemy (Stone Scarab)' },
		{ id: 'mosquito', name: 'Enemy (Huge Mosquito)' },
		{ id: 'huge_mosquito', name: 'Enemy (Huge Mosquito)' },
		{ id: 'wasp', name: 'Enemy (Wasp)' },
		{ id: 'wasp_nest', name: 'Enemy (Wasp Nest)' },
		{ id: 'Xyloalgia', name: 'Enemy (Xyloalgia, Residue of Leuce)' },
		{ id: 'tree_boss', name: 'Enemy (Xyloalgia, Residue of Leuce)' },
		{ id: 'Poena', name: 'Enemy (Poena) \n * phase1' },
		{ id: 'poena', name: 'Enemy (Poena) \n * phase1' },
		// Caves
		{ id: 'tiny_spider', name: 'Enemy (Nail Biter)' },
		{ id: 'small_spider', name: 'Enemy (Skin Peeler)' },
		{ id: 'spider_eggs', name: 'Enemy (Not Caviar)' },
		{ id: 'small_bat', name: 'Enemy (Wound Licker)' },
		{ id: 'medium_bat', name: 'Enemy (Neck Warmer)' },
		{ id: 'scorpion', name: 'Enemy (Knee Chopper)' },
		{ id: 'cool_bat', name: 'Enemy (Ceiling Decorator)' },
		{ id: 'Bolesh', name: 'Enemy (Bolesh, the Cunning)' },
		{ id: 'spider_boss', name: 'Enemy (Bolesh, the Cunning)' },
		// Mushroom
		{ id: 'ant', name: 'Enemy (Ant)' },
		{ id: 'ant_hill', name: 'Enemy (Ant Hill) \\ Sound effect' },
		{ id: 'epic_snail', name: 'Enemy (Big A** Snail)' },
		{ id: 'colossal_snail', name: 'Enemy (Huge Snail)' },
		{ id: 'fluff', name: 'Enemy (Mr. Puff)' },
		{ id: 'mushroom_boss', name: 'Enemy (Angry Shroom)' },
		{ id: 'mushroom_boss_fat', name: 'Enemy (Morel, the Sporeadic)' },
		{ id: 'mushroom_boss_skinny', name: 'Enemy (Enoki, Fungi to be with)' },
		// Halls
		{ id: 'ghost', name: 'Enemy (Booo)' },
		{ id: 'large_ghost', name: 'Enemy (Big Booo)' },
		{ id: 'ghost_tomb', name: 'Enemy (R.I.P.)' },
		{ id: 'small_skeleton', name: 'Enemy (Skeletimmy)' },
		{ id: 'large_skeleton', name: 'Enemy (Skeletony)' },
		{ id: 'ghost_tomb', name: 'Enemy (R.I.Pieces)' },
		{ id: 'Pallas', name: 'Enemy (Pallas, the Skinless)' },
		{ id: 'pallas', name: 'Enemy (Pallas, the Skinless)' },
		{ id: 'skeleton_boss', name: 'Enemy (Pallas, the Skinless)' },
		{ id: 'skeleton_boss_stage_2', name: 'Enemy (Pallas, the Skinless) \n * phase2' },
		// Mine
		{ id: 'mine_walker', name: 'Enemy (Mine walker)' },
		{ id: 'fire_elemental', name: 'Enemy (Fire elemental)' },
		{ id: 'flame_geyser', name: 'Enemy (Flame Geyser)' },
		{ id: 'slave_master', name: 'Enemy (Whip Controller)' },
		{ id: 'big_slave_master', name: 'Enemy (Dominotaur)' },
		{ id: 'bomb_cart', name: 'Enemy (Bomb Cart)' },
		{ id: 'bronze_guardian', name: 'Enemy (Bronze Guardian)' },
		// Ridge
		{ id: 'elite', name: 'Enemy (Elite Ice Elemental)' },
		{ id: 'ice_elemental_elite', name: 'Enemy (Elite Ice Elemental)' },
		{ id: 'pillar', name: 'Enemy (Ice Pillar)' },
		{ id: 'ice_pillar', name: 'Enemy (Ice Pillar) \\ Sound effect' },
		{ id: 'ki_eater', name: 'Enemy (Ki Eater)' },
		{ id: 'ki_slerper', name: 'Enemy (Ki Slurper)' },
		{ id: 'ki_globbler', name: 'Enemy (Ki Globbler)' },
		{ id: 'ice_elemental_elite', name: 'Enemy (Giant Ice Elemental)' },
		{ id: 'Hrimnir', name: 'Enemy (Hrimnir)' },
		{ id: 'yeti', name: 'Enemy (Hrimnir)' },
		// Temple
		{ id: 'slying_serpent', name: 'Enemy (Toupee Snatcher)' },
		{ id: 'ground_serpent', name: 'Enemy (Ground Serpent)' },
		{ id: 'worm_rider', name: 'Enemy (Worm Rider)' },
		{ id: 'cult_guard', name: 'Enemy (Cult Guard)' },
		{ id: 'cult_sorcerer', name: 'Enemy (Cult Sorcerer)' },
		{ id: 'cult_marksman', name: 'Enemy (Cult Marksman)' },
		{ id: 'heavy_hitter', name: 'Enemy (The Bell Ringer)' },
		{ id: 'poison_adept', name: 'Enemy (Poison Adept)' },
		{ id: 'acronian_cultist', name: 'Enemy (Acronian Cultist)' },
		{ id: 'Nagaraja', name: 'Enemy (Nagaraja, Eater of the Torch)' },
		{ id: 'nagaraja', name: 'Enemy (Nagaraja, Eater of the Torch)' },
		// #endregion
		// #region Music
		// Boiling Mine
		{ id: 'bronze_guardian_3', name: 'Sound effect (Music)' },
		{ id: 'bronze_guardian_4', name: 'Sound effect (Music)' },
		{ id: 'bronze_guardian_5', name: 'Sound effect (Music)' },
		{ id: 'bronze_guardian_cyan', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_0', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_1', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_2', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_3', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_4', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_5', name: 'Sound effect (Music)' },
		{ id: 'bronze_mine_cyan', name: 'Sound effect (Music)' },
		{ id: 'slave_outro_climb', name: 'Sound effect (Music)' },
		{ id: 'slave_outro_loop', name: 'Sound effect (Music)' },
		// Caves of Fear
		{ id: 'caustic_caves', name: 'Sound effect (Music)' },
		{ id: 'spider_boss', name: 'Sound effect (Music)' },
		// Deadwood
		{ id: 'cross_deadwood_river', name: 'Sound effect (Music)' },
		{ id: 'cross_deadwood_wind', name: 'Sound effect (Music)' },
		{ id: 'deadwood_0', name: 'Sound effect (Music)' },
		{ id: 'deadwood_1', name: 'Sound effect (Music)' },
		{ id: 'deadwood_2', name: 'Sound effect (Music)' },
		{ id: 'deadwood_3', name: 'Sound effect (Music)' },
		{ id: 'deadwood_4', name: 'Sound effect (Music)' },
		{ id: 'deadwood_5', name: 'Sound effect (Music)' },
		{ id: 'deadwood_cyan', name: 'Sound effect (Music)' },
		{ id: 'tree_boss', name: 'Sound effect (Music)' },
		{ id: 'waterfall_descent', name: 'Sound effect (Music)' },
		// Haunted Halls
		{ id: 'skeleton_boss', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_0', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_1', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_2', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_3', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_4', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_5', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_cyan', name: 'Sound effect (Music)' },
		{ id: 'undead_crypt_intro', name: 'Sound effect (Music)' },
		// Icy Ridge
		{ id: 'bridge_broken', name: 'Sound effect (Music)' },
		{ id: 'bridge_crossing', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_0', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_1', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_2', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_3', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_4', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_5', name: 'Sound effect (Music)' },
		{ id: 'icy_ridge_cyan', name: 'Sound effect (Music)' },
		{ id: 'yeti', name: 'Sound effect (Music)' },
		// Mushroom Forest
		{ id: 'fire_loop', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_0', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_1', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_2', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_3', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_4', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_5', name: 'Sound effect (Music)' },
		{ id: 'fungus_forest_cyan', name: 'Sound effect (Music)' },
		{ id: 'mushroom_boss', name: 'Sound effect (Music)' },
		{ id: 'mushroom_boss_cyan', name: 'Sound effect (Music)' },
		{ id: 'shop', name: 'Sound effect (Music)' },
		// Rocky Plateau
		{ id: 'rocky_plateau_0', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_1', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_2', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_3', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_4', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_5', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_epilogue', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_fight', name: 'Sound effect (Music)' },
		{ id: 'rocky_plateau_talk', name: 'Sound effect (Music)' },
		// Temple
		{ id: 'nagaraja', name: 'Sound effect (Music)' },
		{ id: 'temple_0', name: 'Sound effect (Music)' },
		{ id: 'temple_1', name: 'Sound effect (Music)' },
		{ id: 'temple_2', name: 'Sound effect (Music)' },
		{ id: 'temple_3', name: 'Sound effect (Music)' },
		{ id: 'temple_4', name: 'Sound effect (Music)' },
		{ id: 'temple_5', name: 'Sound effect (Music)' },
		{ id: 'temple_cyan', name: 'Sound effect (Music)' },
		// Events
		{ id: 'event_fall', name: 'Sound effect (Music)' },
		{ id: 'event_hamartia', name: 'Sound effect (Music)' },
		{ id: 'event_spring', name: 'Sound effect (Music)' },
		{ id: 'event_stonejam', name: 'Sound effect (Music)' },
		{ id: 'event_summer', name: 'Sound effect (Music)' },
		{ id: 'event_winter', name: 'Sound effect (Music)' },
		// Other
		{ id: 'credits', name: 'Sound effect (Music)' },
		{ id: 'main_menu', name: 'Sound effect (Music)' },
		{ id: 'bone_factory', name: 'Sound effect (Music)' },
		{ id: 'osteophone', name: 'Sound effect (Music)' },
		{ id: 'uulaa', name: 'Sound effect (Music)' },
		// #endregion
		// #region Ambient
		{ id: 'ambient_mines', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_caves', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_bronze_gate', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_deadwood', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_mushroom', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_bridge', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_icy', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_cave', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_rocky', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_temple', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_crypt', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_haunted_gate', name: 'Sound effect (Ambient)' },
		{ id: 'ambient_pallas', name: 'Sound effect (Ambient)' },
		{ id: 'waterfall_a', name: 'Sound effect (Ambient)' },
		{ id: 'waterfall_b', name: 'Sound effect (Ambient)' },
		{ id: 'waterfall_c', name: 'Sound effect (Ambient)' },
		// #endregion
		// #region Component values
		{ id: '.absoluteX', name: '```stonescript\ncomponent.absoluteX\n```\n---\n * The component\'s position relative to the screen' },
		{ id: '.absoluteY', name: '```stonescript\ncomponent.absoluteY\n```\n---\n * The component\'s position relative to the screen' },
		{ id: '.anchor', name: '```stonescript\ncomponent.anchor\n```\n---\n * Auto-layout property representing the internal pivot of the component. This guides the UI system on how to position the component relative to itself. Default value is "center_center". Possible values: top_left, top_center, top_right, center_left, center_center, center_right, bottom_left, bottom_center and bottom_right' },
		{ id: '.dock', name: '```stonescript\ncomponent.dock\n```\n---\n * Auto-layout property similar to anchor. However, dock represents the external pivot, or position inside the parent where to position the component. If in doubt, use the same value for both anchor and dock, which is the most common situation' },
		{ id: '.ax', name: '```stonescript\ncomponent.ax\n```\n---\n * The X part of the anchor. Possible values: left, center and right' },
		{ id: '.ay', name: '```stonescript\ncomponent.ay\n```\n---\n * The Y part of the anchor. Possible values: top, center and bottom' },
		{ id: '.dx', name: '```stonescript\ncomponent.dx\n```\n---\n * The X part of the dock. Possible values: left, center and right' },
		{ id: '.dy', name: '```stonescript\ncomponent.dy\n```\n---\n * The Y part of the dock. Possible values: top, center and bottom' },
		{ id: '.parent', name: '```stonescript\ncomponent.parent\n```\n---\n * Reference to the component\'s parent Panel. May refer to the root Panel if the component was created but never added to another Panel. When panel.Add(component) is called the component\'s parent changes' },
		{ id: '.visible', name: '```stonescript\ncomponent.visible\n```\n---\n * Visibility of the component. Default value is "inherit". Possible values: true, false and inherit. If set to \'true\', the component will always be visible, ignoring the status of its parent. If set to \'false\', the component will be invisible, regardless of its parent. However, if set to \'inherit\', the component will follow the visibility of its parent' },
		{ id: '.Recycle', name: '```stonescript\component.nRecycle()\n```\n---\n * Removes the component from its parent Panel. It will be repurposed in future ui.Add_() calls. Any variable references to the recycled element should be nulled or reassigned to avoid bugs' },
		// #endregion
		// #region Panel values
		{ id: '.children', name: '```stonescript\npanel.children\n```\n---\n * Array with all the child components that have been added to the Panel with panel.Add()' },
		{ id: '.clip', name: '```stonescript\npanel.clip\n```\n---\n * Indicates if the bounds of Panel should be used to contrain the drawing of child components. If true, parts of child components that fall outside of the Panel\'s bounds will not draw' },
		{ id: '.color', name: '```stonescript\ncomponent.color\n```\n---\n * The component color, in RGB hexadecimal format' },
		{ id: '.style', name: '```stonescript\ncomponent.style\n```\n---\n * ID number of the Component\'s current style. Default value is 1. Possible values from -8 to 8. Additional styles can be added with ui.AddStyle()' },
		{ id: '.Add', name: '```stonescript\npanel.Add(Component, [int])\n```\n---\n * Adds a Component to a Panel. The Component becomes a child of the Panel and the Panel becomes the parent of the Component. The order in which elements are added to a Panel affects the draw order. Components may be inserted to a specific sorting position by use of the optional integer parameter. No integer parameter means the Component is added as the last child of the Panel. This function can also be used for changing the draw order of Components that are already children of the Panel' },
		{ id: '.Clear', name: '```stonescript\npanel.Clear()\n```\n---\n * Removes all UI elements from the Panel. Components removed this way are recycled into the UI system and will be repurposed in future ui.Add_() calls. Any variable references to those elements should be nulled or reassigned to avoid bugs' },
		{ id: '.Remove', name: '```stonescript\npanel.Remove(Component / int)\n```\n---\n * Removes a specific Component from a Panel or removes the Component at a specified index number. Components removed this way are recycled into the UI system and will be repurposed in future ui.Add_() calls. Any variable references to those elements should be nulled or reassigned to avoid bugs' },
		// #endregion
		// #region Text values
		{ id: '.align', name: '```stonescript\ntext.align\n```\n---\n * The alignment/justification of the text inside the box. Default value is "left". Possible values: left, center and right' },
		{ id: '.lines', name: '```stonescript\ntext.lines\n```\n---\n * Array of strings that are the broken-down lines of text after the Text box has formatted its contents. Excludes color metadata' },
		{ id: '.text', name: '```stonescript\ntext.text\n```\n---\n * The full contents of the Text box. A subsection of the text may be colored with the metadata [color=#rrggbb][/color]' },
		// #endregion
		// #region Button values
		{ id: '.tcolor', name: '```stonescript\nbutton.tcolor\n```\n---\n * The color of the text inside the button, in RGB hexadecimal format' },
		{ id: '.bcolor', name: '```stonescript\nbutton.bcolor\n```\n---\n * The color of the button\'s border, in RGB hexadecimal format' },
		{ id: '.hcolor', name: '```stonescript\nbutton.hcolor\n```\n---\n * The color of the button\'s highlight when it\'s pressed, in RGB hexadecimal format' },
		{ id: '.sound', name: '```stonescript\nbutton.\n```\n---\n * The sound effect that plays when the button is pressed. Default is "confirm"' },
		{ id: '.SetPressed', name: '```stonescript\nbutton.SetPressed(f)\n```\n---\n * Assigns a function to be called when the button is pressed. The function can have any number of parameters (even no parameters). When the function is called, the first parameter will be a reference to the button itself' },
		{ id: '.SetDown', name: '```stonescript\nbutton.SetDown(f)\n```\n---\n * Similar to .SetPressed(), .SetDown() assigns a function to be called when the button press begins (first user contact)' },
		{ id: '.SetUp', name: '```stonescript\nbutton.SetUp(f)\n```\n---\n * Similar to .SetPressed(), .SetUp() assigns a function to be called when a depress ends on top of the button (last user contact)' },
		// #endregion
		// #region Anim values
		{ id: '.duration', name: '```stonescript\nanim.duratoin\n```\n---\n * Time length of the animation, in frames' },
		{ id: '.flipX', name: '```stonescript\nanim.flipX\n```\n---\n * If true, flips the art horizontally, over its pivot' },
		{ id: '.flipY', name: '```stonescript\nanim.flipY\n```\n---\n * If true, flips the art vertically, over its pivot' },
		{ id: '.frame', name: '```stonescript\nanim.frame\n```\n---\n * Current animation frame being drawn. Can be changed to set an animation to a specific frame' },
		{ id: '.gamePause', name: '```stonescript\nanim.gamePause\n```\n---\n * If true, the animation automatically pauses playback if the player pauses the game and resumes playback if the player exits the pause screen' },
		{ id: '.loop', name: '```stonescript\nanim.loop\n```\n---\n * If true, the animation will restart from the begining as soon as it reaches the end of its duration' },
		{ id: '.playing', name: '```stonescript\nanim.playing\n```\n---\n * True if the animation is currently playing' },
		{ id: '.paused', name: '```stonescript\nanim.paused\n```\n---\n * True if the animatino is playing, but has been paused with a call to anim.Pause()' },
		{ id: '.pivotX', name: '```stonescript\nanim.pivotX\n```\n---\n * Additional pivot offset that can be used for fine-tuning where the ASCII-art draws in relationship to its position' },
		{ id: '.pivotY', name: '```stonescript\nanim.pivotY\n```\n---\n * Additional pivot offset that can be used for fine-tuning where the ASCII-art draws in relationship to its position' },
		{ id: '.playOnStart', name: '```stonescript\nanim.playOnStart\n```\n---\n * If true, the animation will begin playing as soon as possible' },
		{ id: '.Load', name: '```stonescript\nanim.Load(str)\n```\n---\n * Assigns a new ASCII sprite sheet' },
		{ id: '.Pause', name: '```stonescript\nanim.Pause()\n```\n---\n * Suspends playback of the animation at its current frame. A subsequent call to anim.Play() resumes playback' },
		{ id: '.Play', name: '```stonescript\nanim.Play()\n```\n---\n * Begins playing the animation, or resumes playback in case it had been paused' },
		{ id: '.Stop', name: '```stonescript\nanim.Stop()\n```\n---\n * Suspends playback and sets the animation back to its first frame' },
		// #endregion
		// #region Canvas values
		{ id: '.blend', name: '```stonescript\ncanvas.blend\n```\n---\n * The blend mode of the canvas, when composed with elements behind it. Possible values: Opaque, Multiply, Divide, Add, Subtract. Default value is "opaque"' },
		{ id: '.Get', name: '```stonescript\ncanvas.Get(int, int)\n```\n---\n * Returns the glyph at a specific position x, y on the canvas' },
		{ id: '.Set', name: '```stonescript\ncanvas.Set(str | int, int, [fg], [bg], str)\n```\n---\n * Overloads for changing a canvas at a specific position, while simultaneously setting the foreground and background colors' },
		{ id: '.SetFG', name: '```stonescript\ncanvas.SetFG([int], [int], color)\n```\n---\n * Changes the foreground color at a specific position x,y' },
		{ id: '.SetBG', name: '```stonescript\ncanvas.SetBG([int], [int], color)\n```\n---\n * Changes the background color at a specific position x,y' },
		// #endregion 
		// #region Array values
		{ id: '.Add', name: '```stonescript\na.Add(value)\n```\n---\n * Adds a new value/object to the end of the array' },
		{ id: '.Clear', name: '```stonescript\na.Clear()\n```\n---\n * Removes all elements from the array, making it empty. This is more efficient than re-declaring the array with []' },
		{ id: '.Contains', name: '```stonescript\na.Contains(value)\n```\n---\n * Determines if a given value is inside the array. Returns true if found; false otherwise' },
		{ id: '.Count', name: '```stonescript\na.Count()\n```\n---\n * Returns the number of elements in the array' },
		{ id: '.Emplace', name: '```stonescript\na.Emplace(int, value)\n```\n---\n * Replaces the value at a given position with a new value' },
		{ id: '.IndexOf', name: '```stonescript\na.IndexOf(value)\n```\n---\n * Searches for a given value inside the array. Returns an integer indicating the position of the first occurrance of the value. If the value is not found returns -1' },
		{ id: '.Insert', name: '```stonescript\na.Insert(int, value)\n```\n---\n * Adds a new value/object to a specific position of the array. Elements to the right are shifted to the next position' },
		{ id: '.RemoveAt', name: '```stonescript\na.RemoveAt(int)\n```\n---\n * Removes an element in the array from a specific position. Returns the value removed. \n * Zero-based: myArray.RemoveAt(0) removes the first element. \n * Elements to the right are shifted to the previous position' },
		{ id: '.Sort', name: '```stonescript\na.Sort()\n```\n---\n * Organizes the array\'s elements into ascending order. If the array contains objects of different types it will still be sorted, but no expected results are defined and elements are not guaranteed to be grouped by type' },
		// #endregion
		// { id: '', name: '```stonescript\n ... \n```\n---\n * ' },
		// { id: '',
	]

	for (let index = 0; index < list.length; index++) {
		const item = list[index]
		if (item.id == word) { return new vscode.Hover(item.name) }
		
		if (item.id.includes('.')) {
			let arr = item.id.split('.')
			let len = arr[0].length + 1
			if (arr[1] == word) {
				let index = line.text.indexOf(item.id, wordposition.start.character - len)
				if (index > -1) {
					return new vscode.Hover(item.name)
				}
			}
		}

		if (item.id.includes(' ')) {
			let arr = item.id.split(' ')
			let len = arr[0].length + 1
			if (arr[1] == word) {
				let index = line.text.indexOf(item.id, wordposition.start.character - len)
				if (index > -1) {
					return new vscode.Hover(item.name)
				}
			}
		}
	}
}

module.exports = function (context) {
	context.subscriptions.push(
		vscode.languages.registerHoverProvider('stonescript', {
			provideHover
		})
	)
}
